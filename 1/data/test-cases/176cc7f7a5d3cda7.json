{"uid":"176cc7f7a5d3cda7","name":"test_add_reaction_to_nonexistent_message","fullName":"test_API#test_add_reaction_to_nonexistent_message","historyId":"d9d7c07fa605be566cef353c659812a9","time":{"start":1729960207785,"stop":1729960207888,"duration":103},"status":"failed","statusMessage":"AssertionError: Expected 404 for adding reaction to nonexistent message, but got 401: {\"message\": \"401: Unauthorized\", \"code\": 0}\nassert 401 == 400\n +  where 401 = <Response [401]>.status_code","statusTrace":"base_url = 'https://discord.com/api/v10', channel_id = 1286673475565518878\nheaders = {'Authorization': 'Bot MTI4NjYwOTgxOTEzNzk5ODg4Mw.G0Fflc.xDvykECWDsrG8htMuEj9KYG0lUdx_XweIdzOsE', 'Content-Type': 'application/json'}\n\n    def test_add_reaction_to_nonexistent_message(base_url, channel_id, headers):\n        invalid_message_id = \"12345678901234567890\"  # Не существующий ID\n        emoji = \"\uD83D\uDD25\"\n        emoji_encoded = requests.utils.quote(emoji)\n        url = f\"{base_url}/channels/{channel_id}/messages/{invalid_message_id}/reactions/{emoji_encoded}/@me\"\n        response = requests.put(url, headers=headers)\n>       assert response.status_code == 400, f\"Expected 404 for adding reaction to nonexistent message, but got {response.status_code}: {response.text}\"\nE       AssertionError: Expected 404 for adding reaction to nonexistent message, but got 401: {\"message\": \"401: Unauthorized\", \"code\": 0}\nE       assert 401 == 400\nE        +  where 401 = <Response [401]>.status_code\n\ntest_API.py:110: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1729960206989,"stop":1729960206989,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"channel_id","time":{"start":1729960206990,"stop":1729960206990,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"headers","time":{"start":1729960206990,"stop":1729960206990,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"suite","value":"test_API"},{"name":"host","value":"fv-az702-985"},{"name":"thread","value":"2211-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_API"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"176cc7f7a5d3cda7.json","parameterValues":[]}